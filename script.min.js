// script.min.js

const fileSelectButton = document.getElementById('fileSelectButton');
const fileInput = document.getElementById('fileInput');
const fileNameDisplay = document.getElementById('fileNameDisplay');
const uploadButton = document.getElementById('uploadButton');
const statusElem = document.getElementById('status');
const linkBox = document.getElementById('linkBox');
const copyButton = document.getElementById('copyButton');
const customNameInput = document.getElementById('customNameInput');
const nameOptions = document.querySelectorAll('input[name="nameOption"]');

// 이름 옵션 라디오 버튼 처리
nameOptions.forEach(option => {
  option.addEventListener('change', () => {
    if (option.value === 'custom') {
      customNameInput.classList.add('active');
      // 파일이 선택되어 있다면 확장자 자동으로 제안
      if (fileInput.files.length === 1) {
        const fileName = fileInput.files[0].name;
        // 확장자를 제외한 파일명 추출
        const baseName = fileName.substring(0, fileName.lastIndexOf('.'));
        customNameInput.value = baseName;
      }
    } else {
      customNameInput.classList.remove('active');
    }
  });
});

// (제거됨: 사용자 지정 이름 유효성 검사 이벤트 리스너 제한 제거)

// 파일 선택 시 파일명 업데이트
fileSelectButton.addEventListener('click', () => {
  fileInput.click();
});

fileInput.addEventListener('change', () => {
  if (fileInput.files.length > 0) {
    const names = Array.from(fileInput.files).map(f => f.name);
    fileNameDisplay.textContent = names.join(', ');
    
    // 사용자 지정 이름 옵션이 선택되어 있고 파일이 하나만 선택된 경우
    const customNameOption = document.querySelector('input[name="nameOption"][value="custom"]');
    if (customNameOption.checked && fileInput.files.length === 1) {
      const fileName = fileInput.files[0].name;
      const baseName = fileName.substring(0, fileName.lastIndexOf('.'));
      customNameInput.value = baseName;
    }
  } else {
    fileNameDisplay.textContent = '파일 선택 안됨';
  }
});

// 업로드 버튼 클릭 이벤트 (다중 파일 처리 + 커스텀 이름 옵션)
uploadButton.addEventListener('click', async () => {
  if (fileInput.files.length === 0) {
    statusElem.textContent = '파일이 선택되지 않았습니다.';
    return;
  }
  
  // 사용자 지정 이름 옵션 확인
  const isCustomName = document.querySelector('input[name="nameOption"][value="custom"]').checked;
  if (isCustomName && !customNameInput.value.trim()) {
    statusElem.textContent = '사용자 지정 이름을 입력해주세요.';
    customNameInput.focus();
    return;
  }
  
  const formData = new FormData();
  for (const file of fileInput.files) {
    formData.append('file', file);
  }
  
  // 사용자 지정 이름 추가
  if (isCustomName) {
    formData.append('customName', customNameInput.value.trim());
  }
  
  try {
    // 파일 크기 확인하여 5MB 이상이면 압축 메시지 표시
    const FIVE_MB = 5 * 1024 * 1024;
    let needsCompression = false;
    for (const file of fileInput.files) {
      if (file.size > FIVE_MB) {
        needsCompression = true;
        break;
      }
    }
    
    // 압축이 필요한 경우 해당 메시지 표시
    if (needsCompression) {
      statusElem.textContent = '검열을 위하여 용량 조정 중...';
      // 압축은 보통 5-15초 정도 걸림
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // 실제 요청 전에 검열 중 메시지로 변경
    const uploadStartTime = Date.now();
    
    // 압축 후 검열 메시지 표시를 위한 타이머 (압축이 필요한 경우 8초 후, 아닌 경우 즉시)
    const censorshipTimer = setTimeout(() => {
      statusElem.textContent = '검열 중...';
    }, needsCompression ? 8000 : 0);
    
    // 검열 완료 후 업로드 중 메시지 표시를 위한 타이머
    const uploadTimer = setTimeout(() => {
      statusElem.textContent = '업로드 중...';
    }, needsCompression ? 20000 : 12000);
    
    const response = await fetch('/upload', {
      method: 'POST',
      body: formData
    });
    
    clearTimeout(censorshipTimer);
    clearTimeout(uploadTimer);
    
    const result = await response.json();
    if (result.success) {
      linkBox.value = result.url;
      statusElem.textContent = '업로드 성공';
    } else {
      statusElem.textContent = '업로드 실패: ' + (result.error || '알 수 없는 에러');
    }
  } catch (err) {
    statusElem.textContent = '업로드 중 오류 발생: ' + err.message;
  }
});

// 복사 버튼 클릭 이벤트
copyButton.addEventListener('click', async () => {
  if (linkBox.value) {
    try {
      await navigator.clipboard.writeText(linkBox.value);
      statusElem.textContent = '링크가 복사되었습니다.';
    } catch (err) {
      statusElem.textContent = '복사 실패: ' + err.message;
    }
  }
});

// 클립보드에서 이미지 붙여넣기 이벤트 추가
document.addEventListener('paste', (event) => {
  const clipboardItems = event.clipboardData.items;
  let hasImage = false;
  // 기존 파일과 함께 붙여넣은 이미지 파일들을 추가하기 위해 DataTransfer 객체 사용
  const dt = new DataTransfer();
  // 기존 fileInput에 선택된 파일들을 추가
  for (const file of fileInput.files) {
    dt.items.add(file);
  }
  // 클립보드 아이템 순회
  for (let i = 0; i < clipboardItems.length; i++) {
    const item = clipboardItems[i];
    if (item.type && item.type.startsWith('image/')) {
      const file = item.getAsFile();
      if (file) {
        dt.items.add(file);
        hasImage = true;
      }
    }
  }
  if (hasImage) {
    fileInput.files = dt.files;
    const names = Array.from(fileInput.files).map(f => f.name);
    fileNameDisplay.textContent = names.join(', ');
    statusElem.textContent = '클립보드에서 이미지 추가됨.';
  }
});
